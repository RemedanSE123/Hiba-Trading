generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  phone         String?
  password      String?  // Nullable for OAuth users
  emailVerified DateTime?
  image         String?  // Profile picture from Google
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  addresses Address[]
  cartItems CartItem[]
  orders    Order[]
  
  // Auth provider
  accounts Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  image       String?
  createdAt   DateTime @default(now())
  
  products    Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  stock       Int
  images      String[] // JSON array of image paths
  description String?
  createdAt   DateTime @default(now())
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model CartItem {
  id        String @id @default(cuid())
  quantity  Int    @default(1)
  
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

model Order {
  id             String   @id @default(cuid())
  totalPrice     Float
  paymentProof   String?  // Path to uploaded screenshot
  status         OrderStatus @default(PENDING)
  createdAt      DateTime @default(now())
  deliveryAddress String
  
  userId         String
  user           User @relation(fields: [userId], references: [id])
  
  orderItems     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  price     Float
  
  orderId   String
  order     Order @relation(fields: [orderId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id           String @id @default(cuid())
  province     String
  city         String
  suburb       String
  streetAddress String
  postalCode   String
  phone        String
  
  userId       String
  user         User @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  VERIFIED
  SHIPPED
  DELIVERED
  CANCELLED
}